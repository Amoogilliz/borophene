# QEMAR++: Comprehensive 16‑Qubit Discrete RT, Inequalities, and Robustness

import os
import argparse
import numpy as np
import matplotlib.pyplot as plt
import pennylane as qml
from pennylane import numpy as pnp
import networkx as nx

# ───────────────────────── CONFIGURATION ─────────────────────────
CFG = {
    "n_qubits": 16,             # Must be a power of 2
    "n_layers": 3,              # MERA-like circuit layers
    "n_seeds": 3,               # Random initial seeds for statistics
    "theta_values": [0.0, 0.3, 0.6, 1.0],  # Gate-angle sweep
    "noise_prob": 0.05,         # Bit-flip probability for noise
    "save_dir": "qemar_rt_full16"  # Output directory
}
# Ensure save directory exists
os.makedirs(CFG["save_dir"], exist_ok=True)

def validate_config(cfg):
    n = cfg["n_qubits"]
    if n & (n - 1) != 0:
        raise ValueError(f"n_qubits must be a power of 2, got {n}")
    return int(np.log2(n))

# Compute tree height needed so that number of leaves = n_qubits
TREE_HEIGHT = validate_config(CFG)
# PennyLane device
dev = qml.device("default.qubit", wires=CFG["n_qubits"], shots=None)

# ───────────────────────── MERA CIRCUIT ─────────────────────────
@qml.qnode(dev, interface="autograd")
def mera_circuit(params, theta=0.0, noise=False):
    n = CFG["n_qubits"]
    # Initialize to |0>^n
    qml.BasisState(np.zeros(n, dtype=int), wires=range(n))
    # Optional noise: random X flips
    if noise:
        for q in range(n):
            if np.random.rand() < CFG["noise_prob"]:
                qml.PauliX(wires=q)
    # Layer 0: pairs (0,1),(2,3)...
    offset = 0
    for i in range(0, n, 2):
        qml.RY(params[0, offset+0] + theta, wires=i)
        qml.RY(params[0, offset+1], wires=i+1)
        qml.CNOT(wires=[i, i+1])
        qml.RY(params[0, offset+2], wires=i)
        qml.RY(params[0, offset+3] + theta, wires=i+1)
        offset += 4
    # Layer 1: pairs (1,2),(3,4)...
    offset = 0
    for a, b in [(i, i+1) for i in range(1, n-1, 2)]:
        qml.RY(params[1, offset+0], wires=a)
        qml.RY(params[1, offset+1] + theta, wires=b)
        qml.CNOT(wires=[a, b])
        qml.RY(params[1, offset+2] + theta, wires=a)
        qml.RY(params[1, offset+3], wires=b)
        offset += 4
    # Layer 2: long-range pairs (0,3),(4,7),(8,11),(12,15)
    offset = 0
    pairs = [(0,3),(4,7),(8,11),(12,15)]
    for (a, b) in pairs:
        qml.RY(params[2, offset+0] + theta, wires=a)
        qml.RY(params[2, offset+1], wires=b)
        qml.CNOT(wires=[a, b])
        qml.RY(params[2, offset+2], wires=a)
        qml.RY(params[2, offset+3] + theta, wires=b)
        offset += 4
    return qml.state()

# Initialize random MERA parameters: 3 layers each with (n/2)*4 parameters
layer_size = (CFG["n_qubits"] // 2) * 4
np.random.seed(0)
mera_params = pnp.random.normal(0, 0.1, (CFG["n_layers"], layer_size))

# ───────────────────────── ENTANGLEMENT METRICS ─────────────────────────
def reduced_dm(state, subsys):
    n = CFG["n_qubits"]
    dims = [2] * n
    psi = pnp.reshape(state, dims)
    keep = list(subsys)
    trace_out = [i for i in range(n) if i not in keep]
    rho = pnp.tensordot(psi, pnp.conj(psi), axes=(trace_out, trace_out))
    dim_sub = 2 ** len(subsys)
    return pnp.reshape(rho, (dim_sub, dim_sub))

def entropy(state, subsys):
    rho = reduced_dm(state, subsys)
    evs = qml.math.eigvalsh(rho)
    evs = pnp.clip(evs, 1e-9, 1)
    return float(-pnp.sum(evs * pnp.log(evs)))

# Contiguous and noncontiguous region lists

def contiguous_regions(n):
    regions = []
    for length in range(1, n):
        for start in range(n - length + 1):
            regions.append(tuple(range(start, start + length)))
    return regions

def noncontiguous_pairs(n):
    contiguous = contiguous_regions(n)
    unions = []
    for i in range(len(contiguous)):
        for j in range(i+1, len(contiguous)):
            A, B = set(contiguous[i]), set(contiguous[j])
            if A.isdisjoint(B):
                unions.append(tuple(sorted(A | B)))
    return unions

regions = contiguous_regions(CFG["n_qubits"])
unions = noncontiguous_pairs(CFG["n_qubits"])

# ───────────────────────── BULK HYPERBOLIC LATTICE ─────────────────────────
bulk_tree = nx.balanced_tree(r=2, h=TREE_HEIGHT)
leaves = sorted([node for node in bulk_tree.nodes if bulk_tree.degree[node] == 1 and node != 0])
leaf_to_qubit = {leaf: idx for idx, leaf in enumerate(leaves)}

from functools import lru_cache
@lru_cache(maxsize=None)
def cut_length(region_qubits_tuple):
    region_qubits = list(region_qubits_tuple)
    region_nodes = [leaf for leaf, q in leaf_to_qubit.items() if q in region_qubits]
    outside_nodes = [leaf for leaf, q in leaf_to_qubit.items() if q not in region_qubits]
    min_cut = float('inf')
    for u in region_nodes:
        for v in outside_nodes:
            cut_edges = nx.minimum_edge_cut(bulk_tree, u, v)
            min_cut = min(min_cut, len(cut_edges))
    return min_cut

# Solve alpha via least squares

def solve_alpha(ent_dict, bulk_dict):
    S = np.array([ent_dict[R] for R in ent_dict])
    L = np.array([bulk_dict[R] for R in ent_dict])
    alpha_opt = np.dot(L, S) / np.dot(S, S)
    loss_val = np.sum((L - alpha_opt * S) ** 2)
    return alpha_opt, loss_val

# Check strong subadditivity

def check_strong_subadditivity(state):
    violations = []
    cr = contiguous_regions(CFG["n_qubits"])
    for A in cr:
        for B in cr:
            A_set, B_set = set(A), set(B)
            union = tuple(sorted(A_set | B_set))
            inter = tuple(sorted(A_set & B_set))
            if inter and len(union) < CFG["n_qubits"]:
                S_A = entropy(state, list(A))
                S_B = entropy(state, list(B))
                S_union = entropy(state, list(union))
                S_inter = entropy(state, list(inter))
                if S_A + S_B < S_union + S_inter - 1e-6:
                    violations.append((A, B, S_A + S_B, S_union + S_inter))
    return violations

# ───────────────────────── MAIN RUN / STUDY ─────────────────────────
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--mode", choices=["run", "test"], default="run")
    args = parser.parse_args()

    if args.mode == "test":
        # Bell state entropy and SSA test
        dev2 = qml.device("default.qubit", wires=2)
        @qml.qnode(dev2)
        def bell():
            qml.Hadamard(wires=0); qml.CNOT(wires=[0,1]); return qml.state()
        s = bell()
        assert abs(entropy(s, [0]) - np.log(2)) < 1e-6, "Bell entropy test failed"
        vio = check_strong_subadditivity(s)
        assert not vio, f"SSA violated: {vio}"
        print("✅ Tests passed.")
        exit(0)

    # 1) Alpha distribution over seeds (theta=0, no noise)
    alpha_list = []
    for seed in range(CFG["n_seeds"]):
        np.random.seed(seed)
        params = pnp.random.normal(0, 0.1, (CFG["n_layers"], layer_size))
        st = mera_circuit(params, theta=0.0, noise=False)
        ent_dict = {R: entropy(st, list(R)) for R in regions}
        bulk_dict = {R: cut_length(R) for R in regions}
        alpha_s, _ = solve_alpha(ent_dict, bulk_dict)
        alpha_list.append(alpha_s)
    # Plot histogram
    plt.hist(alpha_list, bins=len(alpha_list), color='skyblue', edgecolor='k')
    plt.title("Alpha Distribution")
    plt.xlabel("alpha"); plt.ylabel("Frequency")
    plt.savefig(os.path.join(CFG["save_dir"], "alpha_hist.png"), dpi=150); plt.close()

    # 2) Theta sweep (no noise)
    theta_alphas = []
    for theta in CFG["theta_values"]:
        params = pnp.random.normal(0, 0.1, (CFG["n_layers"], layer_size))
        st = mera_circuit(params, theta=theta, noise=False)
        ent_dict = {R: entropy(st, list(R)) for R in regions}
        bulk_dict = {R: cut_length(R) for R in regions}
        alpha_t, _ = solve_alpha(ent_dict, bulk_dict)
        theta_alphas.append(alpha_t)
    plt.plot(CFG["theta_values"], theta_alphas, 'o-', color='red')
    plt.title("Alpha vs Theta")
    plt.xlabel("theta"); plt.ylabel("alpha")
    plt.grid(alpha=0.3)
    plt.savefig(os.path.join(CFG["save_dir"], "alpha_vs_theta.png"), dpi=150); plt.close()

    # 3) Noise robustness (theta=0)
    noise_shift = []
    for seed in range(CFG["n_seeds"]):
        np.random.seed(seed)
        params = pnp.random.normal(0, 0.1, (CFG["n_layers"], layer_size))
        st_clean = mera_circuit(params, theta=0.0, noise=False)
        st_noisy = mera_circuit(params, theta=0.0, noise=True)
        ent_c = {R: entropy(st_clean, list(R)) for R in regions}
        ent_n = {R: entropy(st_noisy, list(R)) for R in regions}
        bulk_d = {R: cut_length(R) for R in regions}
        a_c, _ = solve_alpha(ent_c, bulk_d)
        a_n, _ = solve_alpha(ent_n, bulk_d)
        noise_shift.append(a_n - a_c)
    plt.bar(range(len(noise_shift)), noise_shift, color='orange', edgecolor='k')
    plt.title("Noise-Induced Alpha Shift")
    plt.xlabel("Seed"); plt.ylabel("Δ alpha")
    plt.grid(alpha=0.3)
    plt.savefig(os.path.join(CFG["save_dir"], "noise_shift.png"), dpi=150); plt.close()

    # 4) SSA on final state (theta=0, no noise)
    params = pnp.random.normal(0, 0.1, (CFG["n_layers"], layer_size))
    st_final = mera_circuit(params, theta=0.0, noise=False)
    vio_final = check_strong_subadditivity(st_final)
    if vio_final:
        print(f"⚠️ SSA Violations: {vio_final[:3]}...")
    else:
        print("✅ No SSA violations.")

    # 5) Final RT scatter and bulk tree plot
    ent_f = {R: entropy(st_final, list(R)) for R in regions}
    bulk_f = {R: cut_length(R) for R in regions}
    a_f, l_f = solve_alpha(ent_f, bulk_f)
    S_vals = np.array(list(ent_f.values())); L_vals = np.array(list(bulk_f.values()))
    plt.scatter(S_vals, L_vals, color="blue", alpha=0.6)
    xs = np.linspace(0, S_vals.max()*1.1, 100)
    plt.plot(xs, a_f*xs, 'r--', label=f"α={a_f:.2f}")
    plt.xlabel("S(R)"); plt.ylabel("|γ(R)|"); plt.legend(); plt.title("RT Scatter 16-Qubit")
    plt.grid(alpha=0.3)
    plt.savefig(os.path.join(CFG["save_dir"], "rt_scatter16.png"), dpi=150); plt.close()

    # Bulk tree visualization
    plt.figure(figsize=(6,6))
    try:
        pos = nx.nx_agraph.graphviz_layout(bulk_tree, prog='twopi', args='-Grankdir=BT')
    except Exception:
        pos = nx.spring_layout(bulk_tree)
    nx.draw(bulk_tree, pos, node_color='lightgray', node_size=100)
    for leaf, q in leaf_to_qubit.items():
        x, y = pos[leaf]
        plt.text(x, y, str(q), color='red', fontsize=10, ha='center', va='center')
    plt.title("Bulk Binary Tree (Leaves = Qubits)")
    plt.savefig(os.path.join(CFG["save_dir"], "bulk_tree16.png"), dpi=150); plt.close()

    print("🚀 Full 16‑qubit RT study complete.")
    print(f"Results in {CFG['save_dir']}")
